# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GymSolver')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GymSolver')
    _GymSolver = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GymSolver', [dirname(__file__)])
        except ImportError:
            import _GymSolver
            return _GymSolver
        try:
            _mod = imp.load_module('_GymSolver', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GymSolver = swig_import_helper()
    del swig_import_helper
else:
    import _GymSolver
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class GymSolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GymSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GymSolver, name)
    __repr__ = _swig_repr

    def __init__(self, arg2):
        this = _GymSolver.new_GymSolver(arg2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def step(self, arg2):
        return _GymSolver.GymSolver_step(self, arg2)

    def getReward(self):
        return _GymSolver.GymSolver_getReward(self)

    def getDone(self):
        return _GymSolver.GymSolver_getDone(self)

    def getState(self):
        return _GymSolver.GymSolver_getState(self)
    __swig_destroy__ = _GymSolver.delete_GymSolver
    __del__ = lambda self: None
GymSolver_swigregister = _GymSolver.GymSolver_swigregister
GymSolver_swigregister(GymSolver)

# This file is compatible with both classic and new-style classes.

# Following file is the real GymSAT part
import numpy as np
import gym
from gym import spaces
import random
from os import listdir
from os.path import isfile, join
import _thread
class gym_sat_Env(gym.Env):
	
	"""
		this class is a gym environment for Reinforcement Learning algorithms
		It doesn't do any preprocessing (sorting matrix) or postprocessing (permute the training file)
		max_clause: the number of rows in state representation
		max_var: the number of columns in state representation
	"""
	def __init__(self, max_clause=100, max_var=20, test_path = None):
		if test_path == None:
			self.test_mode = False
			self.test_path = "uf20-91_train_v0" # Comments by Fei: BE AWARE, the directory of the training files is statically determined in __init__function
			print("SAT-v0: We are in the training mode of path {}".format(self.test_path))
		else:
			self.test_mode = True
			self.test_path = test_path
			print("SAT-v0: We are in the test mode of path {}".format(self.test_path))
		# Get all test files
		self.test_files = [join(self.test_path, f) for f in listdir(self.test_path) if isfile(join(self.test_path, f))]
		self.test_file_num = len(self.test_files)
		self.test_to = 0
		self.max_clause = max_clause
		self.max_var = max_var
		self.observation_space = np.zeros((max_clause, max_var, 1))
		self.action_space = spaces.Discrete(2*self.max_var)
		self.score = 0
		self.exp_av_score = 15 # some randomly initialized initial average value
		
	"""
		this function parse the state into sparse matrix with -1 or 1 values
		Can handle the case when state is empty and the SAT is either broken or solved already
	"""
	def parse_state(self):
		curr_state = np.zeros((self.max_clause, self.max_var, 1), dtype = np.int8)
		clause_counter = 0 # this tracks the current row-to-write (which is permutable!)
		actionSet = set() # this set tracks all allowed actions for this state
		# if S is already Done, should return here.
		if self.S.getDone():
			return curr_state, clause_counter, True, actionSet
		# S is not yet Done, parse and return real state
		for line in self.S.getState().split('\n'):
			if line.startswith("p cnf"): # this is the header of a cnf problem # p cnf 20 90
				header = line.split(" ")
				num_var = int(header[2])
				num_clause = int(header[3])
				assert (num_var <= self.max_var)
				# assert (num_clause <= self.max_clause) # remove this assert (might be wrong if we learnt too many clauses and restarted)
			elif line.startswith("c"):
				continue
			else: # clause data line # -11 -17 20 0
				literals = line.split(" ")
				n = len(literals)
				for j in range(n-1):
					number = int(literals[j])
					value = 1 if number > 0 else -1
					curr_state[clause_counter, abs(number) - 1] = value
					actionSet.add(number)
				clause_counter += 1
				if clause_counter >= self.max_clause: # add a safe guard for overflow of number of clauses
					break;
		return curr_state, clause_counter, False, actionSet

	"""
		this function randomly pick a file from the training file set
	"""
	def random_pick_satProb(self):
		if self.test_mode: # in the test mode, just iterate all test files in order
			filename = self.test_files[self.test_to]
			self.test_to += 1
			if self.test_to >= self.test_file_num:
				self.test_to = 0
			return filename
		else: # not in test mode, return a random file in "uf20-91" folder.
			return self.test_files[random.randint(0, self.test_file_num - 1)]

	"""
		this function reports to the agent about the environment
	"""
	def report_to_agent(self):
		return self.curr_state, self.S.getReward(), self.isSolved, {}

	"""
		this function reset the environment and return the initial state
	"""
	def reset(self):
		if self.test_mode: # in test mode, we print the actual score of each SAT problem in test files
			print(self.score, end=".", flush=True)
		else: # in training mode, we print an exponential average of scores of randomly picked files
			self.exp_av_score = self.exp_av_score * 0.98 + self.score * 0.02
			print(round(self.exp_av_score), end=".", flush = True)
		self.score = 0
		filename = self.random_pick_satProb()
		self.S = GymSolver(filename)
		self.curr_state, self.clause_counter, self.isSolved, self.actionSet = self.parse_state()
		return self.curr_state

	"""
		this function make a step based on parameter input
	"""
	def step(self, decision):
		self.score += 1
		if (decision < 0): # this is to say that let minisat pick the decision
			decision = 32767
		elif (decision % 2 == 0): # this is to say that pick decision and assign positive value
			decision = int(decision / 2 + 1)
		else: # this is to say that pick decision and assign negative value
			decision = 0 - int(decision / 2 + 1) 
		if (decision in self.actionSet) or (decision == 32767):
			self.S.step(decision)
			self.curr_state, self.clause_counter, self.isSolved, self.actionSet = self.parse_state()
			return self.report_to_agent()
		else:
			return self.report_to_agent() 

	"""
		this function renders the sat problem
	"""
	def render(self, mode='human', close=False):
		pass


class gym_sat_sort_Env(gym.Env):
	
	"""
		this class is a gym environment for Reinforcement Learning algorithms
		It always sort the rows of matrix that represent each state!
		max_clause: the number of rows in state representation
		max_var: the number of columns in state representation
	"""
	def __init__(self, max_clause=100, max_var=20, test_path = None):
		if test_path == None:
			self.test_mode = False
			self.test_path = "uf20-91_train_v1" # Comments by Fei: BE AWARE, the directory of training files is statically defined in __init__function!
			print("SAT-v1 (sort): We are in the training mode of path {}".format(self.test_path))
		else:
			self.test_mode = True
			self.test_path = test_path
			print("SAT-v1 (sort): We are in the test mode of path {}".format(self.test_path))
		# Get all test files
		self.test_files = [join(self.test_path, f) for f in listdir(self.test_path) if isfile(join(self.test_path, f))]
		self.test_file_num = len(self.test_files)
		self.test_to = 0
		self.max_clause = max_clause
		self.max_var = max_var
		self.observation_space = np.zeros((max_clause, max_var, 1))
		self.action_space = spaces.Discrete(2*self.max_var)
		self.score = 0
		self.exp_av_score = 15 # some randomly initialized initial average value
		
	"""
		this function parse the state into sparse matrix with -1 or 1 values
		Can handle the case when state is empty and the SAT is either broken or solved already
	"""
	def parse_state(self):
		curr_state = np.zeros((self.max_clause, self.max_var, 1), dtype = np.int8)
		clause_counter = 0 # this tracks the current row-to-write (which is permutable!)
		actionSet = set() # this set tracks all allowed actions for this state
		# if S is already Done, should return here.
		if self.S.getDone():
			return curr_state, clause_counter, True, actionSet
		# S is not yet Done, parse and return real state
		for line in self.S.getState().split('\n'):
			if line.startswith("p cnf"): # this is the header of a cnf problem # p cnf 20 90
				header = line.split(" ")
				num_var = int(header[2])
				num_clause = int(header[3])
				assert (num_var <= self.max_var)
				# assert (num_clause <= self.max_clause) # remove this assert (might be wrong if we learnt too many clauses and restarted)
			elif line.startswith("c"):
				continue
			else: # clause data line # -11 -17 20 0
				literals = line.split(" ")
				n = len(literals)
				for j in range(n-1):
					number = int(literals[j])
					value = 1 if number > 0 else -1
					curr_state[clause_counter, abs(number) - 1] = value
					actionSet.add(number)
				clause_counter += 1
				if clause_counter >= self.max_clause: # add a safe guard for overflow of number of clauses
					break;
		curr_state = self.sortMatrix(curr_state) # this is to sort the state representation by rows (every time we parse the state)
		return curr_state, clause_counter, False, actionSet

	"""
		this function return the sorted Matrix 
	"""
	def sortMatrix(self, M):
		[row, col] = M.shape
		Morder = np.zeros(row)
		for i in range(col):
			Morder = Morder * 2 + np.absolute(M[:, i])
		index = np.argsort(-1 * Morder)
		return M[index, :]

	"""
		this function randomly pick a file from the training file set
	"""
	def random_pick_satProb(self):
		if self.test_mode: # in the test mode, just iterate all test files in order
			filename = self.test_files[self.test_to]
			self.test_to += 1
			if self.test_to >= self.test_file_num:
				self.test_to = 0
			return filename
		else: # not in test mode, return a random file in "uf20-91" folder.
			return self.test_files[random.randint(0, self.test_file_num - 1)]

	"""
		this function reports to the agent about the environment
	"""
	def report_to_agent(self):
		return self.curr_state, self.S.getReward(), self.isSolved, {}

	"""
		this function reset the environment and return the initial state
	"""
	def reset(self):
		if self.test_mode: # in test mode, we print the actual score of each SAT problem in test files
			print(self.score, end=".", flush=True)
		else: # in training mode, we print an exponential average of scores of randomly picked files
			self.exp_av_score = self.exp_av_score * 0.98 + self.score * 0.02
			print(round(self.exp_av_score), end=".", flush = True)
		self.score = 0
		filename = self.random_pick_satProb()
		self.S = GymSolver(filename)
		self.curr_state, self.clause_counter, self.isSolved, self.actionSet = self.parse_state()
		return self.curr_state

	"""
		this function make a step based on parameter input
	"""
	def step(self, decision):
		self.score += 1
		if (decision < 0): # this is to say that let minisat pick the decision
			decision = 32767
		elif (decision % 2 == 0): # this is to say that pick decision and assign positive value
			decision = int(decision / 2 + 1)
		else: # this is to say that pick decision and assign negative value
			decision = 0 - int(decision / 2 + 1) 
		if (decision in self.actionSet) or (decision == 32767):
			self.S.step(decision)
			self.curr_state, self.clause_counter, self.isSolved, self.actionSet = self.parse_state()
			return self.report_to_agent()
		else:
			return self.report_to_agent() 

	"""
		this function renders the sat problem
	"""
	def render(self, mode='human', close=False):
		pass

class gym_sat_permute_Env(gym.Env):
	
	"""
		this class is a gym environment for Reinforcement Learning algorithms
		It always permute the rows after reading a file
		max_clause: the number of rows in state representation
		max_var: the number of columns in state representation
	"""
	def __init__(self, max_clause=100, max_var=20, test_path = None):
		if test_path == None:
			self.test_mode = False
			self.test_path = "uf20-91_train_v2" # Comment by Fei: BE AWARE, the training data directory in statically determined in __init__function
			print("SAT-v2 (permute): We are in the training mode of path {}".format(self.test_path))
		else:
			self.test_mode = True
			self.test_path = test_path
			print("SAT-v2 (permute): We are in the test mode of path {}".format(self.test_path))
		# Get all test files
		self.test_files = [join(self.test_path, f) for f in listdir(self.test_path) if isfile(join(self.test_path, f))]
		self.test_file_num = len(self.test_files)
		self.test_to = 0
		self.max_clause = max_clause
		self.max_var = max_var
		self.observation_space = np.zeros((max_clause, max_var, 1))
		self.action_space = spaces.Discrete(2*self.max_var)
		self.score = 0
		self.exp_av_score = 15 # some randomly initialized initial average value
		
	"""
		this function parse the state into sparse matrix with -1 or 1 values
		Can handle the case when state is empty and the SAT is either broken or solved already
	"""
	def parse_state(self):
		curr_state = np.zeros((self.max_clause, self.max_var, 1), dtype = np.int8)
		clause_counter = 0 # this tracks the current row-to-write (which is permutable!)
		actionSet = set() # this set tracks all allowed actions for this state
		# if S is already Done, should return here.
		if self.S.getDone():
			return curr_state, clause_counter, True, actionSet
		# S is not yet Done, parse and return real state
		for line in self.S.getState().split('\n'):
			if line.startswith("p cnf"): # this is the header of a cnf problem # p cnf 20 90
				header = line.split(" ")
				num_var = int(header[2])
				num_clause = int(header[3])
				assert (num_var <= self.max_var)
				# assert (num_clause <= self.max_clause) # remove this assert (might be wrong if we learnt too many clauses and restarted)
			elif line.startswith("c"):
				continue
			else: # clause data line # -11 -17 20 0
				literals = line.split(" ")
				n = len(literals)
				for j in range(n-1):
					number = int(literals[j])
					value = 1 if number > 0 else -1
					curr_state[clause_counter, abs(number) - 1] = value
					actionSet.add(number)
				clause_counter += 1
				if clause_counter >= self.max_clause: # add a safe guard for overflow of number of clauses
					break;
		return curr_state, clause_counter, False, actionSet

	"""
		this function randomly pick a file from the training file set
	"""
	def random_pick_satProb(self):
		if self.test_mode: # in the test mode, just iterate all test files in order
			filename = self.test_files[self.test_to]
			self.test_to += 1
			if self.test_to >= self.test_file_num:
				self.test_to = 0
			return filename
		else: # not in test mode, return a random file in "uf20-91" folder.
			return self.test_files[random.randint(0, self.test_file_num - 1)]

	"""
		this function permute the rows (clauses) of a given file, and rewrite that file with the permuted one
	"""
	def permute_row(self, filename):
		clauses = []
		header = None
		with open(filename, "r") as read_in:
			for line in read_in:
				if line.startswith("p cnf"):
					header = line
				elif line.startswith("c"):
				    # comments line, skip
				    continue
				elif any(char.isdigit() and (not char == '0') for char in line): 
					# clause data line
					# put them in a list first, then permute and write to write_out
					clauses.append(line)
		with open(filename, 'w') as write_out:
			write_out.write(header)
			# permute the clauses and write to write_out
			random.shuffle(clauses)
			for line in clauses:
				write_out.write(line)

	"""
		this function reports to the agent about the environment
	"""
	def report_to_agent(self):
		return self.curr_state, self.S.getReward(), self.isSolved, {}

	"""
		this function reset the environment and return the initial state
	"""
	def reset(self):
		if self.test_mode: # in test mode, we print the actual score of each SAT problem in test files
			print(self.score, end=".", flush=True)
		else: # in training mode, we print an exponential average of scores of randomly picked files
			self.exp_av_score = self.exp_av_score * 0.98 + self.score * 0.02
			print(round(self.exp_av_score), end=".", flush = True)
		self.score = 0
		filename = self.random_pick_satProb()
		self.S = GymSolver(filename)
		# since we just used the "filename", we should permute rows of this file in a separate thread
		_thread.start_new_thread(self.permute_row, (filename,))
		self.curr_state, self.clause_counter, self.isSolved, self.actionSet = self.parse_state()
		return self.curr_state

	"""
		this function make a step based on parameter input
	"""
	def step(self, decision):
		self.score += 1
		if (decision < 0): # this is to say that let minisat pick the decision
			decision = 32767
		elif (decision % 2 == 0): # this is to say that pick decision and assign positive value
			decision = int(decision / 2 + 1)
		else: # this is to say that pick decision and assign negative value
			decision = 0 - int(decision / 2 + 1) 
		if (decision in self.actionSet) or (decision == 32767):
			self.S.step(decision)
			self.curr_state, self.clause_counter, self.isSolved, self.actionSet = self.parse_state()
			return self.report_to_agent()
		else:
			return self.report_to_agent() 

	"""
		this function renders the sat problem
	"""
	def render(self, mode='human', close=False):
		pass